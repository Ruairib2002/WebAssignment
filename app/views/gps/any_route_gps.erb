<!DOCTYPE html>
<html>

<head>
  <title>GPS Map with Markers</title>
  <%= javascript_include_tag "https://maps.googleapis.com/maps/api/js?key=AIzaSyCmHtKK6Khdr2koqAakd0JrpNcYQJCJBpA&libraries=places" %>
  <style>
    #map {
      height: 500px;
      width: 100%;
    }
  </style>
</head>

<body>
  <h1>Google Map with Markers</h1>

  <div id="map"></div>

  <br><br>
  <button onclick="window.location.href='/gps/new_route'">Go to New Route Page</button>

  <script>
    let map;
    let directionsService;
    let directionsRenderer;
    let originMarker;
    let destinationMarker;
    let originPosition;
    let destinationPosition;
    let places = [];  // Array to hold the places

    function initMap() {
      var mapOptions = {
        center: {
          lat: 54.4231, // Default location, adjust as needed
          lng: -6.4446
        },
        zoom: 12
      };

      map = new google.maps.Map(document.getElementById('map'), mapOptions);
      directionsService = new google.maps.DirectionsService();
      directionsRenderer = new google.maps.DirectionsRenderer();
      directionsRenderer.setMap(map);

      // Fetch places and issues from the server
      fetch('/places.json')  // Adjust the URL if needed
        .then(response => response.json())
        .then(data => {
          places = data;  // Store the places from the server
          addMarkers();   // Add markers for places
        })
        .catch(error => console.error('Error fetching places:', error));

      // Fetch active issues from the server and add markers for them
      fetch('/issues/active.json')  // Adjust the route if needed
        .then(response => response.json())
        .then(issues => {
          addIssueMarkers(issues);   // Add markers for issues
        })
        .catch(error => console.error('Error fetching issues:', error));

      // Initialize markers as null
      originMarker = null;
      destinationMarker = null;

      // Add click event listener for map
      map.addListener('click', function(event) {
        // If no origin marker, set origin
        if (!originMarker) {
          originMarker = new google.maps.Marker({
            position: event.latLng,
            map: map,
            label: "Start",
            title: "Origin",
            draggable: true
          });
          originPosition = event.latLng;
        } else if (!destinationMarker) {
          // If origin is set, set destination marker
          destinationMarker = new google.maps.Marker({
            position: event.latLng,
            map: map,
            label: "End",
            title: "Destination",
            draggable: true
          });
          destinationPosition = event.latLng;

          // Once both markers are set, calculate route
          calculateRoute();
        }
      });

      // If marker is dragged, recalculate route
      google.maps.event.addListener(originMarker, 'dragend', function() {
        originPosition = originMarker.getPosition();
        if (destinationPosition) {
          calculateRoute();
        }
      });

      google.maps.event.addListener(destinationMarker, 'dragend', function() {
        destinationPosition = destinationMarker.getPosition();
        if (originPosition) {
          calculateRoute();
        }
      });
    }

    // Function to add markers for places
    function addMarkers() {
      places.forEach(place => {
        const position = new google.maps.LatLng(place.latitude, place.longitude);

        // Create a marker for each place
        const marker = new google.maps.Marker({
          position: position,
          map: map,
          title: place.name // Marker title is the place name
        });

        // Optional: Add an InfoWindow to show the place name when clicking the marker
        const infoWindow = new google.maps.InfoWindow({
          content: `<div><strong>${place.name}</strong><br>Latitude: ${place.latitude}<br>Longitude: ${place.longitude}</div>`
        });

        marker.addListener('click', function() {
          infoWindow.open(map, marker);
        });
      });
    }

    // Function to add markers for issues
    function addIssueMarkers(issues) {
      issues.forEach(issue => {
        const position = new google.maps.LatLng(issue.latitude, issue.longitude);

        // Create a marker for each issue
        const issueMarker = new google.maps.Marker({
          position: position,
          map: map,
          title: issue.category // Marker title is the issue category
        });

        // Add an InfoWindow to show more info when clicking the marker
        const infoWindow = new google.maps.InfoWindow({
          content: `<div><strong>Category:</strong> ${issue.category}<br><strong>Coordinates:</strong> ${issue.latitude}, ${issue.longitude}</div>`
        });

        issueMarker.addListener('click', function() {
          infoWindow.open(map, issueMarker);
        });
      });
    }

    // Function to calculate the route between origin and destination
    function calculateRoute() {
      if (originPosition && destinationPosition) {
        const request = {
          origin: originPosition,
          destination: destinationPosition,
          travelMode: google.maps.TravelMode.DRIVING,
          provideRouteAlternatives: true
        };

        directionsService.route(request, function(result, status) {
          if (status == google.maps.DirectionsStatus.OK) {
            directionsRenderer.setDirections(result);
          } else {
            alert("Could not fetch routes. Please try again.");
          }
        });
      }
    }

    google.maps.event.addDomListener(window, 'load', initMap);
  </script>
</body>

</html>
