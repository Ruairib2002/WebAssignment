<!DOCTYPE html>
<html>

<head>
  <title>GPS Map</title>
  <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCmHtKK6Khdr2koqAakd0JrpNcYQJCJBpA&libraries=places,geometry"></script>
  <style>
    #map {
      height: 500px;
      width: 100%;
    }

    #route-table {
      margin-top: 20px;
      width: 100%;
      border-collapse: collapse;
    }

    #route-table th, #route-table td {
      padding: 8px;
      border: 1px solid #ddd;
      text-align: left;
    }

    #route-table th {
      background-color: #f2f2f2;
    }

    #buttons, #quick-route {
      margin-top: 20px;
    }

    button {
      padding: 10px;
      font-size: 16px;
      cursor: pointer;
      margin-right: 10px;
    }

    select {
      padding: 8px;
      font-size: 16px;
    }

    #route-table tr:hover {
      background-color: #f5f5f5;
      cursor: pointer;
      transform: scale(1.02);
      transition: transform 0.3s ease, background-color 0.3s ease;
    }

    .selected-route {
      background-color: lightgreen;
      font-weight: bold;
      transform: scale(1.05);
    }
  </style>
</head>

<body>
  <h1>GPS Map</h1>
  <div id="map"></div>

  <div id="quick-route">
    <h2>Quick Route</h2>
    <label for="start-select">Start:</label>
    <select id="start-select"></select>

    <label for="end-select">Destination:</label>
    <select id="end-select"></select>

    <button onclick="quickRoute()">Find Route</button>
  </div>

  <table id="route-table">
    <thead>
      <tr>
        <th>Route</th>
        <th>Distance</th>
        <th>Time</th>
      </tr>
    </thead>
    <tbody id="route-table-body"></tbody>
  </table>

  <div id="buttons">
    <button onclick="window.location.href='/issues'">View All Issues</button>
    <button onclick="window.location.href='/gps/index'">Save A New Place</button>
  </div>

  <script>
    let map, directionsService;
    let routePolylines = [];
    let originMarker, destinationMarker;
    let originPosition, destinationPosition;
    let issuePositions = [];
    let currentRoutes = [];
    let currentOptimalRouteIndex = null;
    let geocoder;
    let issueMarkers = [];
    const DISTANCE_THRESHOLD = 100;
    let issueCircles = [];

    function initMap() {
      map = new google.maps.Map(document.getElementById("map"), {
        center: { lat: 54.4231, lng: -6.4446 },
        zoom: 12
      });

      directionsService = new google.maps.DirectionsService();
      geocoder = new google.maps.Geocoder();
      loadSavedPlaces();

      fetch('/issues/active.json')
        .then(response => response.json())
        .then(issues => {
          issues.forEach(issue => {
            const position = new google.maps.LatLng(issue.latitude, issue.longitude);
            issuePositions.push(position);

            const issueCircle = new google.maps.Circle({
              center: position,
              radius: DISTANCE_THRESHOLD,
              map: map,
              fillColor: 'rgba(255, 0, 0, 0.3)',
              fillOpacity: 0.3,
              strokeColor: 'red',
              strokeOpacity: 0.8,
              strokeWeight: 1
            });

            issueCircles.push(issueCircle);

            geocoder.geocode({ location: position }, function(results, status) {
              if (status === google.maps.GeocoderStatus.OK && results[0]) {
                const address = results[0].formatted_address;
                const marker = new google.maps.Marker({
                  position: position,
                  map: map,
                  title: `Issue: ${address}`,
                  icon: {
                    url: "http://maps.google.com/mapfiles/ms/icons/red-dot.png",
                    scaledSize: new google.maps.Size(32, 32),
                  }
                });

                issueMarkers.push(marker);

                const infoWindow = new google.maps.InfoWindow({
                  content: `<h3>${issue.category}</h3><p>${address}</p>`
                });

                marker.addListener('click', () => {
                  infoWindow.open(map, marker);
                });
              }
            });
          });
        })
        .catch(error => console.error("Error fetching issues:", error));

      map.addListener("click", (event) => {
        if (!originMarker) {
          originMarker = new google.maps.Marker({
            position: event.latLng,
            map: map,
            label: "S",
            draggable: true
          });
          originPosition = event.latLng;
          originMarker.addListener("dragend", () => {
            originPosition = originMarker.getPosition();
            if (destinationPosition) calculateRoutes();
          });
        } else if (!destinationMarker) {
          destinationMarker = new google.maps.Marker({
            position: event.latLng,
            map: map,
            label: "D",
            draggable: true
          });
          destinationPosition = event.latLng;
          destinationMarker.addListener("dragend", () => {
            destinationPosition = destinationMarker.getPosition();
            if (originPosition) calculateRoutes();
          });
          calculateRoutes();
        }
      });
    }

    function calculateRoutes() {
      if (!originPosition || !destinationPosition) {
        alert("Please set both start and destination points.");
        return;
      }

      routePolylines.forEach(polyline => polyline.setMap(null));
      routePolylines = [];

      let request = {
        origin: originPosition,
        destination: destinationPosition,
        travelMode: google.maps.TravelMode.DRIVING,
        provideRouteAlternatives: true
      };

      directionsService.route(request, (result, status) => {
        if (status === google.maps.DirectionsStatus.OK) {
          updateRouteTable(result.routes);
          currentRoutes = result.routes;
          setOptimalRoute(0);
        } else {
          alert("Could not fetch routes. Please try again.");
        }
      });
    }

    function quickRoute() {
      const startValue = JSON.parse(document.getElementById("start-select").value);
      const endValue = JSON.parse(document.getElementById("end-select").value);

      if (!startValue || !endValue) {
        alert("Please select both start and destination points.");
        return;
      }

      if (originMarker) originMarker.setMap(null);
      if (destinationMarker) destinationMarker.setMap(null);

      originMarker = new google.maps.Marker({ position: startValue, map: map, label: "S" });
      destinationMarker = new google.maps.Marker({ position: endValue, map: map, label: "D" });

      originPosition = startValue;
      destinationPosition = endValue;
      calculateRoutes();
    }

    google.maps.event.addDomListener(window, "load", initMap);
  </script>
</body>

</html>
