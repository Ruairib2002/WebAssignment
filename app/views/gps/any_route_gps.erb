<!DOCTYPE html>
<html>

<head>
  <title>GPS Map with Markers</title>
  <%= javascript_include_tag "https://maps.googleapis.com/maps/api/js?key=AIzaSyCmHtKK6Khdr2koqAakd0JrpNcYQJCJBpA&libraries=places,geometry" %>
  <style>
    #map {
      height: 500px;
      width: 100%;
    }

    #route-table {
      margin-top: 20px;
      width: 100%;
      border-collapse: collapse;
    }

    #route-table th, #route-table td {
      padding: 8px;
      border: 1px solid #ddd;
      text-align: left;
    }

    #route-table th {
      background-color: #f2f2f2;
    }

    #buttons {
      margin-top: 20px;
    }

    button {
      padding: 10px;
      font-size: 16px;
      cursor: pointer;
      margin-right: 10px;
    }

    select {
      padding: 8px;
      font-size: 16px;
    }

    #route-table tr:hover {
      background-color: #f5f5f5;
      cursor: pointer;
      transform: scale(1.02);
      transition: transform 0.3s ease, background-color 0.3s ease;
    }

    .selected-route {
      background-color: lightgreen;
      font-weight: bold;
      transform: scale(1.05);
    }
  </style>
</head>

<body>
  <h1>Google Map with Markers</h1>

  <div id="map"></div>

  <br><br>

  <div id="quick-route">
    <h2>Quick Route</h2>
    <label for="start-select">Start:</label>
    <select id="start-select"></select>

    <label for="end-select">Destination:</label>
    <select id="end-select"></select>

    <button onclick="quickRoute()">Find Route</button>
  </div>

  <table id="route-table">
    <thead>
      <tr>
        <th>Route</th>
        <th>Distance</th>
        <th>Time</th>
      </tr>
    </thead>
    <tbody id="route-table-body"></tbody>
  </table>

  <div id="buttons">
    <button onclick="window.location.href='/gps/new_route'">Go to New Route Page</button>
    <button onclick="window.location.href='/issues'">View All Issues</button>
  </div>

  <script>
    let map;
    let directionsService;
    let directionsRenderer;
    let originMarker;
    let destinationMarker;
    let originPosition;
    let destinationPosition;
    let currentRoutes = [];
    let placesData = [];

    function initMap() {
      var mapOptions = {
        center: {
          lat: 54.4231,
          lng: -6.4446
        },
        zoom: 12
      };

      map = new google.maps.Map(document.getElementById('map'), mapOptions);
      directionsService = new google.maps.DirectionsService();
      directionsRenderer = new google.maps.DirectionsRenderer();
      directionsRenderer.setMap(map);

      fetch('/gps/saved_places')
        .then(response => response.json())
        .then(places => {
          placesData = places;
          populatePlacesDropdowns();
        })
        .catch(error => console.error('Error fetching places:', error));

      map.addListener('click', function (event) {
        if (!originMarker) {
          originMarker = new google.maps.Marker({
            position: event.latLng,
            map: map,
            label: "Start",
            title: "Origin",
            draggable: true
          });
          originPosition = event.latLng;
        } else if (!destinationMarker) {
          destinationMarker = new google.maps.Marker({
            position: event.latLng,
            map: map,
            label: "End",
            title: "Destination",
            draggable: true
          });
          destinationPosition = event.latLng;
          calculateRoute();
        }
      });

      google.maps.event.addListener(originMarker, 'dragend', function () {
        originPosition = originMarker.getPosition();
        if (destinationPosition) {
          calculateRoute();
        }
      });

      google.maps.event.addListener(destinationMarker, 'dragend', function () {
        destinationPosition = destinationMarker.getPosition();
        if (originPosition) {
          calculateRoute();
        }
      });
    }

    function calculateRoute() {
      if (originPosition && destinationPosition) {
        const request = {
          origin: originPosition,
          destination: destinationPosition,
          travelMode: google.maps.TravelMode.DRIVING,
          provideRouteAlternatives: true
        };

        directionsService.route(request, function (result, status) {
          if (status === google.maps.DirectionsStatus.OK) {
            currentRoutes = result.routes;
            updateRouteTable();
            directionsRenderer.setDirections(result);
          } else {
            alert("Could not fetch routes. Please try again.");
          }
        });
      }
    }

    function updateRouteTable() {
      const routeTableBody = document.getElementById("route-table-body");
      routeTableBody.innerHTML = '';

      currentRoutes.forEach((route, index) => {
        const row = document.createElement("tr");
        const routeCell = document.createElement("td");
        const distanceCell = document.createElement("td");
        const timeCell = document.createElement("td");

        routeCell.innerText = `Route ${index + 1}`;
        distanceCell.innerText = route.legs[0].distance.text;
        timeCell.innerText = route.legs[0].duration.text;

        row.appendChild(routeCell);
        row.appendChild(distanceCell);
        row.appendChild(timeCell);
        routeTableBody.appendChild(row);

        row.addEventListener('click', function () {
          currentRoutes.forEach((r, i) => {
            if (i === index) {
              directionsRenderer.setRouteIndex(i);
              row.classList.add("selected-route");
            } else {
              row.classList.remove("selected-route");
            }
          });
        });
      });
    }

    function quickRoute() {
      const startValue = JSON.parse(document.getElementById("start-select").value);
      const endValue = JSON.parse(document.getElementById("end-select").value);

      if (!startValue || !endValue) {
        alert("Please select both start and destination points.");
        return;
      }

      if (originMarker) originMarker.setMap(null);
      if (destinationMarker) destinationMarker.setMap(null);

      originMarker = new google.maps.Marker({ position: startValue, map: map, label: "S" });
      destinationMarker = new google.maps.Marker({ position: endValue, map: map, label: "D" });

      originPosition = startValue;
      destinationPosition = endValue;
      calculateRoute();
    }

    function populatePlacesDropdowns() {
      const startSelect = document.getElementById("start-select");
      const endSelect = document.getElementById("end-select");

      startSelect.innerHTML = '';
      endSelect.innerHTML = '';

      placesData.forEach(place => {
        const startOption = document.createElement("option");
        startOption.value = JSON.stringify({ lat: place.latitude, lng: place.longitude });
        startOption.textContent = place.name;

        const endOption = document.createElement("option");
        endOption.value = JSON.stringify({ lat: place.latitude, lng: place.longitude });
        endOption.textContent = place.name;

        startSelect.appendChild(startOption);
        endSelect.appendChild(endOption);
      });
    }

    google.maps.event.addDomListener(window, 'load', initMap);
  </script>
</body>

</html>
