<!DOCTYPE html>
<html>

<head>
  <title>GPS Map with Optimal and Risky Routes</title>
  <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCmHtKK6Khdr2koqAakd0JrpNcYQJCJBpA&libraries=places,geometry"></script>
  <style>
    #map {
      height: 500px;
      width: 100%;
    }

    #route-table {
      margin-top: 20px;
      width: 100%;
      border-collapse: collapse;
    }

    #route-table th, #route-table td {
      padding: 8px;
      border: 1px solid #ddd;
      text-align: left;
    }

    #route-table th {
      background-color: #f2f2f2;
    }
  </style>
</head>

<body>
  <h1>Google Map with Optimal and Risky Routes</h1>
  <div id="map"></div>

  <table id="route-table">
    <thead>
      <tr>
        <th>Route</th>
        <th>Distance</th>
        <th>Time</th>
        <th>Status</th>
      </tr>
    </thead>
    <tbody id="route-table-body"></tbody>
  </table>

  <br>
  <button onclick="window.location.href='/gps/new_route'">Go to New Route Page</button>

  <script>
    let map, directionsService;
    let renderers = [];
    let originMarker, destinationMarker;
    let originPosition, destinationPosition;
    let issuePositions = [];

    function initMap() {
      map = new google.maps.Map(document.getElementById("map"), {
        center: { lat: 54.4231, lng: -6.4446 },
        zoom: 12
      });

      directionsService = new google.maps.DirectionsService();

      fetch('/issues/active.json')
        .then(response => response.json())
        .then(issues => {
          issues.forEach(issue => {
            const position = new google.maps.LatLng(issue.latitude, issue.longitude);
            issuePositions.push(position);

            new google.maps.Marker({
              position: position,
              map: map,
              title: issue.category,
              icon: {
                url: "http://maps.google.com/mapfiles/ms/icons/red-dot.png",
                scaledSize: new google.maps.Size(32, 32),
              }
            });
          });
        })
        .catch(error => console.error("Error fetching issues:", error));

      map.addListener("click", (event) => {
        if (!originMarker) {
          originMarker = new google.maps.Marker({
            position: event.latLng,
            map: map,
            label: "S",
            title: "Start",
            draggable: true
          });
          originPosition = event.latLng;
          originMarker.addListener("dragend", () => {
            originPosition = originMarker.getPosition();
            if (destinationPosition) calculateRoutes();
          });
        } else if (!destinationMarker) {
          destinationMarker = new google.maps.Marker({
            position: event.latLng,
            map: map,
            label: "D",
            title: "Destination",
            draggable: true
          });
          destinationPosition = event.latLng;
          destinationMarker.addListener("dragend", () => {
            destinationPosition = destinationMarker.getPosition();
            if (originPosition) calculateRoutes();
          });
          calculateRoutes();
        }
      });
    }

    function calculateRoutes() {
      if (!originPosition || !destinationPosition) {
        alert("Please set both start and destination points.");
        return;
      }

      // Clear old routes
      renderers.forEach(renderer => renderer.setMap(null));
      renderers = [];

      let request = {
        origin: originPosition,
        destination: destinationPosition,
        travelMode: google.maps.TravelMode.DRIVING,
        provideRouteAlternatives: true
      };

      directionsService.route(request, (result, status) => {
        if (status === google.maps.DirectionsStatus.OK) {
          let validRoutes = [];
          let riskyRoutes = [];

          result.routes.forEach((route, index) => {
            let nearIssue = route.legs.some(leg =>
              leg.steps.some(step =>
                issuePositions.some(issue =>
                  google.maps.geometry.spherical.computeDistanceBetween(step.end_location, issue) < 300
                )
              )
            );

            if (nearIssue) {
              riskyRoutes.push({ route, index });
            } else {
              validRoutes.push({ route, index });
            }
          });

          // Show the best issue-free route in BLUE
          if (validRoutes.length > 0) {
            renderRoute(result, validRoutes[0].index, "blue", "Optimal (Issue-Free)");
          }

          // Show up to 2 risky routes in RED
          riskyRoutes.slice(0, 2).forEach(({ route, index }) => {
            renderRoute(result, index, "red", "Near Issues");
          });

          // If no issue-free routes exist, show at least 1 risky route
          if (validRoutes.length === 0 && riskyRoutes.length > 0) {
            alert("No fully issue-free routes. Showing the best available route.");
            renderRoute(result, riskyRoutes[0].index, "red", "Near Issues");
          }
        } else {
          console.error("Route request failed:", status);
          alert("Could not fetch routes. Please try again.");
        }
      });
    }

    function renderRoute(result, routeIndex, color, status) {
      let renderer = new google.maps.DirectionsRenderer({
        map: map,
        directions: result,
        routeIndex: routeIndex,
        polylineOptions: { strokeColor: color }
      });
      renderers.push(renderer);

      updateRouteTable(result.routes[routeIndex], color, status);
    }

    function updateRouteTable(route, color, status) {
      const tableBody = document.getElementById('route-table-body');
      const leg = route.legs[0];
      const row = document.createElement('tr');

      row.innerHTML = `
        <td style="color: ${color};">Route</td>
        <td>${leg.distance.text}</td>
        <td>${leg.duration.text}</td>
        <td>${status}</td>
      `;

      tableBody.appendChild(row);
    }

    google.maps.event.addDomListener(window, "load", initMap);
  </script>
</body>

</html>
