<!DOCTYPE html>
<html>

<head>
  <title>GPS Map</title>
  <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCmHtKK6Khdr2koqAakd0JrpNcYQJCJBpA&libraries=places,geometry"></script>
  <style>
    #map {
      height: 500px;
      width: 100%;
    }

    #route-table {
      margin-top: 20px;
      width: 100%;
      border-collapse: collapse;
    }

    #route-table th, #route-table td {
      padding: 8px;
      border: 1px solid #ddd;
      text-align: left;
    }

    #route-table th {
      background-color: #f2f2f2;
    }

    #buttons {
      margin-top: 20px;
    }

    button {
      padding: 10px;
      font-size: 16px;
      cursor: pointer;
      margin-right: 10px;
    }
  </style>
</head>

<body>
  <h1>GPS Map</h1>
  <div id="map"></div>

  <table id="route-table">
    <thead>
      <tr>
        <th>Route</th>
        <th>Distance</th>
        <th>Time</th>
      </tr>
    </thead>
    <tbody id="route-table-body"></tbody>
  </table>

  <div id="buttons">
    <button onclick="window.location.href='/issues'">View All Issues</button>
  </div>

  <script>
    let map, directionsService;
    let routePolylines = [];
    let originMarker, destinationMarker;
    let originPosition, destinationPosition;
    let issuePositions = [];

    function initMap() {
      map = new google.maps.Map(document.getElementById("map"), {
        center: { lat: 54.4231, lng: -6.4446 },
        zoom: 12
      });

      directionsService = new google.maps.DirectionsService();

      // Fetch active issues and plot them on the map
      fetch('/issues/active.json')
        .then(response => response.json())
        .then(issues => {
          issues.forEach(issue => {
            const position = new google.maps.LatLng(issue.latitude, issue.longitude);
            issuePositions.push(position);

            new google.maps.Marker({
              position: position,
              map: map,
              title: issue.category,
              icon: {
                url: "http://maps.google.com/mapfiles/ms/icons/red-dot.png",
                scaledSize: new google.maps.Size(32, 32),
              }
            });
          });
        })
        .catch(error => console.error("Error fetching issues:", error));

      map.addListener("click", (event) => {
        if (!originMarker) {
          originMarker = new google.maps.Marker({
            position: event.latLng,
            map: map,
            label: "S",
            title: "Start",
            draggable: true
          });
          originPosition = event.latLng;
          originMarker.addListener("dragend", () => {
            originPosition = originMarker.getPosition();
            if (destinationPosition) calculateRoutes();
          });
        } else if (!destinationMarker) {
          destinationMarker = new google.maps.Marker({
            position: event.latLng,
            map: map,
            label: "D",
            title: "Destination",
            draggable: true
          });
          destinationPosition = event.latLng;
          destinationMarker.addListener("dragend", () => {
            destinationPosition = destinationMarker.getPosition();
            if (originPosition) calculateRoutes();
          });
          calculateRoutes();
        }
      });
    }

    function calculateRoutes() {
      if (!originPosition || !destinationPosition) {
        alert("Please set both start and destination points.");
        return;
      }

      // Clear old routes
      routePolylines.forEach(polyline => polyline.setMap(null));
      routePolylines = [];

      let request = {
        origin: originPosition,
        destination: destinationPosition,
        travelMode: google.maps.TravelMode.DRIVING,
        provideRouteAlternatives: true // Request alternative routes
      };

      directionsService.route(request, (result, status) => {
        if (status === google.maps.DirectionsStatus.OK) {
          updateRouteTable(result.routes); // Update table with all routes

          // Find the optimal route (e.g., first route is considered optimal)
          const optimalRoute = result.routes[0];

          // Draw all routes
          result.routes.forEach((route, index) => {
            let isOptimalRoute = route === optimalRoute;
            drawRoute(route, isOptimalRoute);
          });
        } else {
          console.error("Route request failed:", status);
          alert("Could not fetch routes. Please try again.");
        }
      });
    }

    function drawRoute(route, isOptimalRoute) {
      const color = isOptimalRoute ? 'blue' : 'lightblue';
      const polylineOptions = {
        strokeOpacity: 1.0,
        strokeWeight: 6,
        map: map
      };

      route.legs.forEach(leg => {
        leg.steps.forEach(step => {
          let path = step.path;
          let polyline = new google.maps.Polyline({
            path: path,
            geodesic: true,
            strokeColor: color,
            ...polylineOptions
          });
          routePolylines.push(polyline);
        });
      });

      // Highlight segments in the issue zone with red color
      route.legs.forEach(leg => {
        leg.steps.forEach(step => {
          let path = step.path;
          path.forEach((point, index) => {
            let nearIssue = issuePositions.some(issue =>
              google.maps.geometry.spherical.computeDistanceBetween(point, issue) < 300 // 300m radius
            );

            if (nearIssue) {
              let polyline = new google.maps.Polyline({
                path: [path[index - 1], point], // Draw only the problematic segment
                geodesic: true,
                strokeColor: 'red',
                strokeOpacity: 1.0,
                strokeWeight: 6,
                map: map
              });
              routePolylines.push(polyline);
            }
          });
        });
      });
    }

    function updateRouteTable(routes) {
      const tableBody = document.getElementById('route-table-body');
      tableBody.innerHTML = "";

      routes.forEach((route, index) => {
        const leg = route.legs[0];

        const row = document.createElement('tr');
        row.innerHTML = `
          <td>Route ${index + 1}</td>
          <td>${leg.distance.text}</td>
          <td>${leg.duration.text}</td>
        `;

        tableBody.appendChild(row);
      });
    }

    google.maps.event.addDomListener(window, "load", initMap);
  </script>
</body>

</html>
