<!DOCTYPE html>
<html>

<head>
  <title>GPS Map with Markers</title>
  <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCmHtKK6Khdr2koqAakd0JrpNcYQJCJBpA&libraries=places,geometry"></script>
  <style>
    #map {
      height: 500px;
      width: 100%;
    }

    #route-table {
      margin-top: 20px;
      width: 100%;
      border-collapse: collapse;
    }

    #route-table th,
    #route-table td {
      padding: 8px;
      border: 1px solid #ddd;
      text-align: left;
    }

    #route-table th {
      background-color: #f2f2f2;
    }
  </style>
</head>

<body>
  <h1>Google Map with Markers</h1>
  <div id="map"></div>

  <!-- Route information table -->
  <table id="route-table">
    <thead>
      <tr>
        <th>Route</th>
        <th>Distance</th>
        <th>Time</th>
      </tr>
    </thead>
    <tbody id="route-table-body">
    </tbody>
  </table>

  <br><br>
  <button onclick="window.location.href='/gps/new_route'">Go to New Route Page</button>

  <script>
    let map, directionsService, directionsRenderer;
    let originMarker, destinationMarker;
    let originPosition, destinationPosition;
    let issuePositions = [];

    function initMap() {
      map = new google.maps.Map(document.getElementById("map"), {
        center: { lat: 54.4231, lng: -6.4446 },
        zoom: 12
      });

      directionsService = new google.maps.DirectionsService();
      directionsRenderer = new google.maps.DirectionsRenderer({ suppressMarkers: false });
      directionsRenderer.setMap(map);

      fetch('/issues/active.json')
        .then(response => response.json())
        .then(issues => {
          issues.forEach(issue => {
            const position = new google.maps.LatLng(issue.latitude, issue.longitude);
            issuePositions.push(position);

            new google.maps.Marker({
              position: position,
              map: map,
              title: issue.category,
              icon: {
                url: "http://maps.google.com/mapfiles/ms/icons/red-dot.png",
                scaledSize: new google.maps.Size(32, 32),
              }
            });
          });
        })
        .catch(error => console.error("Error fetching issues:", error));

      map.addListener("click", (event) => {
        if (!originMarker) {
          originMarker = new google.maps.Marker({
            position: event.latLng,
            map: map,
            label: "S",
            title: "Start",
            draggable: true
          });
          originPosition = event.latLng;
          originMarker.addListener("dragend", () => {
            originPosition = originMarker.getPosition();
            if (destinationPosition) calculateRoute();
          });
        } else if (!destinationMarker) {
          destinationMarker = new google.maps.Marker({
            position: event.latLng,
            map: map,
            label: "D",
            title: "Destination",
            draggable: true
          });
          destinationPosition = event.latLng;
          destinationMarker.addListener("dragend", () => {
            destinationPosition = destinationMarker.getPosition();
            if (originPosition) calculateRoute();
          });
          calculateRoute();
        }
      });
    }

    function calculateRoute() {
      if (!originPosition || !destinationPosition) {
        alert("Please set both start and destination points.");
        return;
      }

      console.log("Calculating route...");
      console.log("Origin:", originPosition.toString());
      console.log("Destination:", destinationPosition.toString());

      let waypoints = issuePositions.map(position => ({
        location: google.maps.geometry.spherical.computeOffset(position, 500, Math.random() * 360),
        stopover: false
      }));

      const request = {
        origin: originPosition,
        destination: destinationPosition,
        travelMode: google.maps.TravelMode.DRIVING,
        avoidTolls: true,
        avoidFerries: true,
        provideRouteAlternatives: true,
        waypoints: waypoints
      };

      directionsService.route(request, (result, status) => {
        if (status === google.maps.DirectionsStatus.OK) {
          let filteredRoutes = result.routes.filter(route => {
            return !route.legs.some(leg => leg.steps.some(step => {
              return issuePositions.some(issue => {
                return google.maps.geometry.spherical.computeDistanceBetween(step.end_location, issue) < 300;
              });
            }));
          });

          const displayedRoute = filteredRoutes.length > 0 ? filteredRoutes[0] : result.routes[0];
          directionsRenderer.setDirections({ routes: [displayedRoute] });

          // Update the route table
          updateRouteTable(displayedRoute);

          if (filteredRoutes.length === 0) {
            alert("No available routes avoiding issues. Showing the best available route.");
          }
        } else {
          console.error("Route request failed:", status);
          alert("Could not fetch routes. Please try again.");
          updateRouteTable(null);
        }
      });
    }

    function updateRouteTable(route) {
      const tableBody = document.getElementById('route-table-body');
      tableBody.innerHTML = ''; // Clear existing content

      if (route) {
        const leg = route.legs[0];
        const row = document.createElement('tr');
        row.innerHTML = `
          <td>Route from S to D</td>
          <td>${leg.distance.text}</td>
          <td>${leg.duration.text}</td>
        `;
        tableBody.appendChild(row);
      } else {
        const row = document.createElement('tr');
        row.innerHTML = `
          <td>Route from S to D</td>
          <td>Unable to calculate</td>
          <td>N/A</td>
        `;
        tableBody.appendChild(row);
      }
    }

    google.maps.event.addDomListener(window, "load", initMap);
  </script>
</body>

</html>