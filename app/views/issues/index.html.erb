<!DOCTYPE html>
<html>

<head>
  <title>Issues/Problem Map</title>
  <%= javascript_include_tag "https://maps.googleapis.com/maps/api/js?key=AIzaSyCmHtKK6Khdr2koqAakd0JrpNcYQJCJBpA&libraries=places,geometry" %>
  <style>
    #map {
      height: 500px;
      width: 100%;
    }

    /* Style for the issue list box */
    #issue-list {
      margin-top: 20px;
      padding: 15px;
      background-color: #f9f9f9;
      border: 1px solid #ddd;
      border-radius: 5px;
      max-height: 300px;
      overflow-y: scroll;
    }

    .issue-item {
      padding: 10px;
      border-bottom: 1px solid #ddd;
    }

    .issue-item:last-child {
      border-bottom: none;
    }

    .issue-category {
      font-weight: bold;
    }

    .issue-coordinates {
      font-size: 0.9em;
      color: gray;
    }

    /* Style for the button */
    .btn {
      display: inline-block;
      padding: 10px 15px;
      margin-top: 20px;
      background-color: #007bff;
      color: white;
      text-align: center;
      border-radius: 5px;
      text-decoration: none;
    }

    .btn:hover {
      background-color: #0056b3;
    }

    /* Style for the radius input */
    #radius-input {
      margin-top: 10px;
      font-size: 16px;
    }
  </style>
</head>

<body>
  <h1>Report Road Issues</h1>

  <!-- Button to redirect user to the new issue form -->
  <button onclick="goToNewIssueForm()">Create New Issue</button>

  <!-- Map container -->
  <div id="map"></div>

  <!-- Box for displaying active issues -->
  <div id="issue-list">
    <h2>Active Issues</h2>
    <div id="issues-container"></div>
  </div>

  <!-- Button to resolve issues -->
  <a href="<%= resolve_all_issues_path %>" class="btn">Resolve Issues</a>

  <!-- Input for the radius of effect -->
  <div id="radius-input">
    <label for="radius">Radius of Effect (in meters):</label>
    <input type="number" id="radius" value="100" min="10" max="1000" />
  </div>

  <script>
    let map;
    let marker;
    let issueLatitude;
    let issueLongitude;
    let issueRadius = 100; // Default radius of effect
    const issueMarkers = []; // To store issue markers
    const issueCircles = []; // To store the circles around issue markers
    let routePolylines = []; // To store the drawn routes

    // This function initializes the map and adds existing issues as markers
    function initMap() {
      // Map initialization with a default center
      const mapOptions = {
        center: {
          lat: 54.4231, // Set your default latitude here
          lng: -6.4446 // Set your default longitude here
        },
        zoom: 12
      };

      map = new google.maps.Map(document.getElementById('map'), mapOptions);

      // Fetch existing active issues from the server (make sure your server provides this)
      fetch('/issues/active.json') // Fixed route for active issues
        .then(response => response.json())
        .then(issues => {
          // Display the issues in the list
          displayIssues(issues);

          // Create markers for each issue
          issues.forEach(issue => {
            const position = new google.maps.LatLng(issue.latitude, issue.longitude);

            // Create a marker for each issue
            const issueMarker = new google.maps.Marker({
              position: position,
              map: map,
              title: issue.category, // Marker title is the issue category
            });

            // Create a circle for each issue to represent the radius of effect
            const issueCircle = new google.maps.Circle({
              center: position,
              radius: issue.radius || 100, // Default to 100 meters if no radius is provided
              map: map,
              fillColor: 'rgba(255, 0, 0, 0.3)',
              fillOpacity: 0.3,
              strokeColor: 'red',
              strokeOpacity: 0.8,
              strokeWeight: 1
            });

            // Store markers and circles
            issueMarkers.push(issueMarker);
            issueCircles.push(issueCircle);

            // Add an InfoWindow to display more info when clicking the marker
            const infoWindow = new google.maps.InfoWindow({
              content: `<div><strong>Category:</strong> ${issue.category}<br><strong>Coordinates:</strong> ${issue.latitude}, ${issue.longitude}<br><strong>Radius of Effect:</strong> ${issue.radius || 100} meters</div>`
            });

            issueMarker.addListener('click', function() {
              infoWindow.open(map, issueMarker);
            });
          });
        })
        .catch(error => {
          console.error('Error fetching issues:', error);
        });

      // Add click listener to place a marker for creating new issues
      map.addListener('click', function(event) {
        // Remove any existing marker
        if (marker) {
          marker.setMap(null);
        }

        // Place a new marker where the user clicked
        marker = new google.maps.Marker({
          position: event.latLng,
          map: map,
          draggable: true
        });

        // Update the latitude and longitude values
        issueLatitude = event.latLng.lat();
        issueLongitude = event.latLng.lng();
      });
    }

    // Function to redirect to the form page with latitude and longitude as parameters
    function goToNewIssueForm() {
      if (issueLatitude && issueLongitude) {
        // Get the radius from the input
        issueRadius = parseInt(document.getElementById('radius').value) || 100;

        // Redirect to the form, passing latitude, longitude, and radius
        window.location.href = "<%= new_issue_path %>?latitude=" + issueLatitude + "&longitude=" + issueLongitude + "&radius=" + issueRadius;
      } else {
        alert("Please click on the map to place the marker first.");
      }
    }

    // Function to display the issues under the map in the issue list
    function displayIssues(issues) {
      const issuesContainer = document.getElementById('issues-container');
      issuesContainer.innerHTML = '';

      issues.forEach(issue => {
        if (issue.active) {
          const issueItem = document.createElement('div');
          issueItem.classList.add('issue-item');

          issueItem.innerHTML = `
            <div class="issue-category">${issue.category}</div>
            <div class="issue-coordinates">Latitude: ${issue.latitude}, Longitude: ${issue.longitude}</div>
            <div class="issue-coordinates">Radius: ${issue.radius || 100} meters</div>
          `;

          issuesContainer.appendChild(issueItem);
        }
      });
    }

    function checkRouteAgainstIssue(routePath) {
      routePath.forEach((step) => {
        issueCircles.forEach((circle, index) => {
          const distance = google.maps.geometry.spherical.computeDistanceBetween(step, circle.getCenter());
          if (distance <= circle.getRadius()) {
            routePolylines.forEach(polyline => polyline.setMap(null)); // Remove previous polylines
            // Change polyline color to red for this route if it's within the radius
            const polyline = new google.maps.Polyline({
              path: routePath,
              strokeColor: 'red',
              strokeOpacity: 1.0,
              strokeWeight: 6,
              map: map
            });
            routePolylines.push(polyline);
          }
        });
      });
    }

    google.maps.event.addDomListener(window, 'load', initMap);
  </script>
</body>

</html>